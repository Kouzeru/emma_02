<html>
<title>Direct Assembler</title>
<body>
<h2>Direct Assembler</h2>
<p>
To use the Direct Assembler functions of the debugger first select the 'Direct Assembler' tab of the choice book on the debugger tab.
</p>
<p>
When a computer emulation is running the left half of the Direct Assembler tab will show a small area of memory (around address 0) in different types:
<UL>
<LI>RCA 1802, 1804 or 1805 code (in black/<FONT COLOR="FOREST GREEN">green</FONT>) 
<LI>Data (in <FONT COLOR="BLUE">blue</FONT>)
<LI>Branches  (in <FONT COLOR="FOREST GREEN">green</FONT>)
<LI>Subroutine calls (in <FONT COLOR="#C833A1">light purple</FONT> and reversed in <FONT COLOR="RED">red</FONT>)
<LI>Text (in <FONT COLOR="SALMON">salmon</FONT>
<LI>Macro's (in black/<FONT COLOR="FOREST GREEN">green</FONT> or black/<FONT COLOR="#C833A1">light purple</FONT>)
<LI>Pseudo code, like Chip 8, ST2, ST4, FEL (in <FONT COLOR="STEEL BLUE">steel blue</FONT>)
<LI>Undefined, i.e. no ROM or RAM (in <FONT COLOR="RED">red</FONT>)
</UL>
</p>
<p>
The above types are all possible within one session, except pseudo code is only possible on machines running a dedicated interpreter. Emma 02 will show the correct type if:
<OL>
<LI>The code was typed into the Direct Assembler
<LI>The specified location was 'marked' as a specific type (see chapter 'Marking specific types')
<LI>The specified location was 'executed' as RCA 180x or pseudo code
</OL>
</p>
<p>
The colors <FONT COLOR="FOREST GREEN">green</FONT> and <FONT COLOR="#C833A1">light purple</FONT> are also used for address that have branches or subroutine calls to them. Making it easier to see to which addresses the code will actually branch or jump to.
</p>
<p>
If nothing is specified or no code is executed memory is shown in 'Data' or 'Undefined'.
</p>
<h3>Assembler</h3>
<p>
To use the assembler type in any 1802, 1804 or 1805 code in the command line (in the middle of the right half of the 'Direct Assembler' tab). For command syntax see chapter <a href="DebuggerSyntax180x.htm">180x Syntax</a>, this should be similar or even the same as the 180x data sheets. 
</p>
<p>
To use the Pseudo code assembler a machine should be started that includes a Chip-8, ST2, ST4 or FEL interpreter. For command syntax see chapters <a href="DebuggerSyntaxChip.htm">Chip-8 Syntax</a>, <a href="DebuggerSyntaxSt.htm">ST2 Syntax</a>, <a href="DebuggerSyntaxSt4.htm">ST4 Syntax</a> and/or <a href="DebuggerSyntaxFel2.htm">FEL Syntax</a>
</p>
<p>
The Current working address is indicated in <B>bold</B> and between <B>&gt; &lt;</B>. To change the working address see chapter 'Move working address'. Note that all data values should be given as hexadecimal values unless preceded by a & in which case the value should be decimal, i.e LDI &100 is the same as LDI 64.
</p>
<p>
Next to 180x, Chip-8, ST2, ST4 and FEL code the following options are also available from the command line:
<UL>
<LI>#ww xx yy zz
<br>Data input, where ww, xx, yy, zz are hexadecimal vales and will be stored on the current and following working address. At least one (ww) value should be specified. I.e. #10, will store value 10, #20 30, will store 20 and on the following address 30. Spaces between bytes are optional.
<LI>'text
<br>Store ASCII text, all text after ' will be stored in ASCII code at the current working address. When using this on the Studio IV characters are stored with Studio IV charcater numbering.
<LI>"text
<br>Only valuable for the COMX to store ASCII text in 'high color', all text after " will be stored in ASCII code (range 80 to FF) at the current working address.
<LI>:address
<br>Store 16 bit 'Branch data', see also chapter 'Branch data'.
</UL>
</p>
<h3>Disassembler</h3>
<p>
All code shown in the left side of the Direct Assembler tab is disassembled in real time. Any part of memory can also be disassembled to an assembler (.asm or .txt) file by pressing the 'Dis' button. The first two text boxes on the right of the 'Dis' button will be used as start and end address.
</p>
<p>
Code will be disassmbled based on 'execution' by the CPU. So only code that has been executed is marked as 180x code and will be disassembled. Main advantage of this is that 'data' will be shown as bytes instead of 180x code. This does mean that for a complete disassembly all code should first be executed as much as possible. Parts of code that are 'less easy' to execute can however be marked as code manually; see also chapter 'Marking Specific types'. Executed 'pseudo' code will be shown as 'DB' in the output file with the pseudo code shown as comments.
</p>
<p>
Next to marking code it is also possible to:
<UL>
<LI>mark ASCII text which in the output file will be shown as DB 'text'.
<LI>mark subroutines like SEP 4 xxyy, where xxyy is marked with 'Branch' which will be shown in the output file as DW label. With the label defined at addess xxyy.
<LI>mark loading of an address location with LDL, which will be shown as LOAD Rx,label in the output file.
</UL>
</p>
<p>
The output file is fully compatible with the A18 assembler.
</p>
<p>
The disassembler output will include lists for:
<UL>
<LI>Labels: showing all labels used in the disassebled code.
<LI>Unused or indirect labels: showing labels for which no branches or subroutine calls are found in the code. Most likely SEP Rx instructions exist in the code which cause jumps to these labels.
<LI>Out of range branches or addresses: showing which branches refer to addresses outside the disassembled code.
</UL> 
</p>
<h3>Marking specific types</h3>
<p>
Emma 02 will automatically select the correct type as long as the code is 'executed'. So to look at disassembled code just make sure the code is actually executed once in the current session.
</p>
<p>
The type can also be changed manually, as follows:
<OL>
<LI>Select the desired type via the choice button at the top right of the Direct Assembler tab (showing 1802 as default)
<LI>Select either 'One' or 'Range' depending if one location or a range of locations need to be changed
<LI>Fill in the location to be changed (next to the 'One/Range' choice button), default this is the current 'working' location
<LI>Press 'Mark'
</OL>
</p>
<p>
The newly selected type should be shown directly in the left half of the Direct Assembler tab.
</p>
<p>
To save type information please see chapter 'Program configurations' below.
</p>
<p>
The following choices are available:
<UL>
<LI>1802: Use for RCA 1802, 1804 or 1805 code
<LI>Data: Use for data values
<LI>Text: ASCII text
<LI>Branch: Use for memory locations containing another memory location (order used high byte and then low byte), see also chapter 'Branch data'.
<LI>Rev Br: Use for memory locations containing another memory location (order used low byte and then high byte)
<LI>LDL: LDL Macro, see also chapter 'LDL, LDV and RLDL instructions'
<LI>LDV: LDV Macro, see also chapter 'LDL, LDV and RLDL instructions'
<LI>Switch: Switch to other mnemonic, see also chapter 'Switch mnemonic'
<LI>Pseudo: Chip 8, ST2, ST4 or FEL code
</UL>
</p>
<h3>Move working address</h3>
<p>
Default working address 0 is selected and shown disassembled on the left half of the Direct Assembler tab. To move to other locations use one of the following options:
<OL>
<LI>Fill in new address in the 'Move to:' field
<LI>Press the left large 'up' or 'down' buttons to move one page
<LI>Press the right small 'up' or 'down' buttons to move one location / address
<LI>Press SHIFT 'arrow up' or 'arrow down' on the PC keyboard to move one page
<LI>Press 'arrow up' or 'arrow down' on the PC keyboard to move one location / address
</OL>
</p>
<h3>Data view</h3>
<p>
Default data view is set to 'Dump', resulting in a view of 4 bytes on one row followed by 4 character shapes of the same bytes. Changing to 'Single' will change the view to 1 byte per row followed by 1 character shape of the same byte.
</p>
<h3>Program configurations</h3>
<p>
For every computer a default program configuration is defined. For most computers this is the first available 1, 2 or 4K of RAM. For the Studio clones it is the cart area and for the Cidelsa the game ROM.
</p>
<p>
To be able to save the 'debug' or 'type' information, i.e. the information defining what locations are 1802 code, data and possibly Chip 8 or ST2 code, a program configuration needs to be defined. The same goes for using the 'Insert', 'Delete' and 'Branch location' features, see chapters 'Insert / Delete' and 'Branch location'.
</p>
<p>
The program configurations define:
<UL>
<LI>Program name
<LI>Program directory
<LI>Code start
<LI>Code end
<LI>(Program) end, default equal to Code end.
<LI>S/P (COMX: Slot code, ELF: EMS Page)
</UL>
</p>
<p>
For example:
<br>Name: test.bin
<br>Code start: 8000
<br>Code end: 80FF
<br>(Program) end: 81FF
</p>
<p>
This will define a code area of 8000 to 80FF and a data area between 8100 to 81FF. After this configuration is defined a 'Save' will store a binary file 'test.bin' of memory locations 8000 to 81FF as well as save 'type' information a file test.debug. When 'Save' is pressed a configuration file name is also requested which will save all configuration data like program name, directory, code start etc. 
</p>
<p>
It is recommended to keep all data either at the start of the code area; or after in the data area between 'Code end' and '(Program) end'. Data can also be used mixed in with code as long as the 'LVL' macro is used to load the data address (see also chapter 'LDL, LDV and RLDL instructions'). If no data is needed in the pure data area 'Code end' and '(Program) end' can be equal.
</p>
<p>
To add a program to a configuration press 'New'. After filling in program name, code start, code end and program end press 'Store'. When starting a new configuration there is no need to press 'New'. An existing configuration can be loaded by pressing 'Load' and then the .config file name. Pressing the up or down buttons will step thru the defined configurations if more than 1 is defined.
</p>
<p>
To automatically save the defined programs as well as the .config file, select 'Save on exit'. If no configuration file has been specified a default file debug.config will be saved.
</p>
<p>
All areas defined as code will show the address locations in black, other areas will show the address in grey. 
</p>
<p>
Multiple program areas can be defined in one configuration. E.g. loading the SB configuration (press SB button on a COMX with SB active) will load 12 program areas! 
</p>
The COMX Slot code should be defined as the COMX out 1 definition:
b0: 0=Select ROM bank, 1=Select RAM bank
b1: Select slot 1
b2: Select slot 2
b3: Select slot 3
b4: Select slot 4
b5-b7: bank number 0 to 8
<p>
Bits 0 and 5 to 7 are only used in combination with the SB FW.
</p>
<p>
The Elf EMS Page is the page number 0 to 1F.
</p>
<p>
Note that any configuration range in a COMX Slot should always be between C000 and DFFF and the ELf Page between 8000 and BFFF.
</p>
<h4>Program configuration Number</h4>
<p>
After every 'Save' of a program configuration all binary and debug files are backed up by putting a numbered extension after the file name. Starting with 1 and counting up.
</p>
<p>
The Direct Assemble can load any of these configurations back by filling in a 'number' in the 'Configuration number' field (right after the file name field. So to load back the oldest back-up configuration fill in '1', to load back the latest fill inthe latest number you can find in thr folder where all configurations are saved.
</p>
<p>
Note ALL files will be loaded with the same configuration extension. 
</p>
<h3>Insert / Delete </h3>
<p>
Insert and Delete functions can be used after defining a program configuration. Both functions can only be used between (one of) the defined 'Code start' and '(Program) end' locations.
</p>
<h4>Insert</h4>
<p>
Pressing the 'Insert' button will insert one 'NOP', i.e instruction C4 when used on an address with code, otherwise a '0' will be inserted. 
</p>
<p>
The insert feature will check all code and data areas (defined in program configurations) for branches, branch data (see chapter 'Branch location') and LDL/RLDL instructions (see chapter 'LDL, LDV and RLDL instructions). All branches found that need to 'change' due to the insert instruction will be corrected. e.g. if an insert is done on 8002 in the code below:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">03</FONT>
8002: NOP
8003: LDI 10
</pre>
it will change to:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">04</FONT>
8002: NOP
8003: NOP
8004: LDI 10
</pre>
if however the insert is done on or after address 8003 the BR 03 will stay the same. 
</p>
<p>
If any short branch can NOT be changed due to the insert it will be changed to a long branch, e.g. if an insert is done on 8002 in the code below:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">FF</FONT>
8002: NOP
8003: LDI 10
</pre>
it will change to:
<pre>
8000: LBR <FONT COLOR="FOREST GREEN">8101</FONT>
8003: NOP
8004: NOP
8005: LDI 10
</pre>
Note that the branch has changed to 8101 and NOT 8100 as an extra byte had to be inserted to fit the 3 byte long LBR instruction.
</p>
<p>
Not all short branches have equivalent long branch instructions (i.e. B1, B2 etc). If any of these branches cause a possible problem they will be listed in the 'message' area (just below the 'Command line input') as 'Check: address'.
</p>
<h4>Delete</h4>
<p>
Pressing the 'Delete' button will delete the current instruction or byte, one or more '0's will be stored just before the code or program end. 
</p>
<p>
The delete feature will check all code and data areas (defined in program configurations) for branches, branch data (see chapter 'Branch location') and LDL/RLDL instructions (see chapter 'LDL, LDV and RLDL instructions). All branches found that need to 'change' due to the delete instruction will be corrected. e.g. if a delete is done on 8002 in the code below:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">04</FONT>
8002: NOP
8003: NOP
8004: LDI 10
</pre>
it will change to:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">03</FONT>
8002: NOP
8003: LDI 10
</pre>
If any long branch can be changed to a short branch due to the delete it will be changed automatically, e.g. if a delete is done on 8003 in the code below:
<pre>
8000: LBR <FONT COLOR="FOREST GREEN">8100</FONT>
8003: NOP
8004: NOP
8005: LDI 10
</pre>
it will change to:
<pre>
8000: BR <FONT COLOR="FOREST GREEN">FE</FONT>
8002: NOP
8003: LDI 10
</pre>
Note that the branch has changed to FE and NOT FF as an extra byte could be deleted because the 3 byte long LBR is replace by a 2 byte long BR.
</p>
<h4>Chip 8, Chip 8X, Chip ETI, Chip Studio - Insert and Delete</h4>
<p>
If Chip 8 code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>JP aaa
<LI>JP V0, aaa (not in Chip 8X)
<LI>LD I,aaa
<LI>SYS aaa
</UL>
</p>
<h4>ST2 - Insert and Delete</h4>
<p>
If ST2 code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>DJNZ V0, kk
<LI>JNZ Vx, kk
<LI>JKP n, kk
<LI>JKP VB, kk
<LI>JP aaa
<LI>JZ Vx, kk
<LI>LD I,aaa
<LI>SP DRW, JC, kk (or SP DRW, kk)
<LI>SYS aaa
</UL>
</p>
<p>
Note: none of the short jumps within a page will be corrected if the insert or delete causes them to go outside of the page. Instead the address of the jump will be listed in the message area.
</p>
<h4>ST4 - Insert and Delete</h4>
<p>
If ST4 code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL 6kk
<LI>CALL 7kk
<LI>CALL 8kk
<LI>CALL 10kk
<LI>CALL 11kk
<LI>JP kk
<LI>JNZ Vx, kk
<LI>JZ Vx, kk
<LI>LD I, 0aaa
<LI>LD I, 2aaa
<LI>LD I, 3aaa
<LI>LD I, 4aaa
</UL>
</p>
<p>
Note that if a CALL will change to an addres outside 600-8FF or 1000-11FF address ranges, the command itself will change as the pseudo code will change to 65kk, 69kk, 0Fkk or 12kk. LD I instructions will change within a range of 0FFF, so LI I, 0aaa will not change outside 0aaa range.
</p>
<h4>CB, FEL - Insert and Delete</h4>
<p>
If CB or FEL code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>JP aaa
<LI>SYS aaa
</UL>
</p>
<h4>GPL I, GPL II - Insert and Delete</h4>
<p>
If GPL I or GPL II code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>JP aaa
<LI>LD [6aa], Vx
<LI>SE Vx, [6aa] (GPL I only)
<LI>SNE Vx, [6aa]
<LI>SYS aaa
</UL>
<p>
Note: none of the short [6aa] references within page 6 will be corrected if the insert or delete causes them to go outside of the page. Instead the address of the instruction will be listed in the message area.
</p>
<h4>FPL - Insert and Delete</h4>
<p>
If FPL code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>JP aaa
<LI>LD [6aa], Vx
<LI>SYS aaa
</UL>
<p>
Note: none of the short [6aa] references within page 6 will be corrected if the insert or delete causes them to go outside of the page. Instead the address of the instruction will be listed in the message area.
</p>
<h4>Scramble, Swords - Insert and Delete</h4>
<p>
If Scramble or Swords code is used within the program configuration that code will also be corrected by the insert and delete function. The following commands will be corrected:
<UL>
<LI>CALL aaa
<LI>JNZ V0, aaa
<LI>JP aaa
<LI>JP FIREA, kk
<LI>JP FIREB, kk
<LI>JP 'EF3', kk
<LI>JP COIN, kk
<LI>JZ V0, aaa
<LI>SYS aaa

</UL>
</p>
<h3>Copy data or code</h3>
<p>
To copy data or code first specify start and end address in the fields just next to the 'Dis' button. Then fill in the destination after the 'To:' text. Press the 'Copy' button to execute the copy. 
</p>
<p>
If code is copied to the same lower 8 bit start address also all long branches, LDL/RLDL instructions (see chapter 'LDL, LDV and RLDL instructions'), branch data (see chapter 'Branch data'), Chip 8 long branches and ST2 long branches (as listed in 'Chip and ST2 - Insert and Delete' chapters) will be converted. I.e if 8000 contains:
<pre>
8000: LBR <FONT COLOR="FOREST GREEN">8010</FONT>
</pre>
A copy 8000-8100 To: 8200; will result in code at 8200 of:
<pre>
8200: LBR <FONT COLOR="FOREST GREEN">8210</FONT>
</pre>
In the above also the fact that 8000 contains an 1802 instruction will be copied to 8200 showing 1802 code at 8200 as well. A copy 8000-8100 To: 8210; will however result in code at 8210 of:
<pre>
8210: <FONT COLOR="BLUE">C0 80 10</FONT>, i.e. just data bytes
</pre>
</p>
<h3>Branch data</h3>
<p>
Some code will need branch tables or use 2 bytes to identify an address location. As an example COMX BASIC uses R4/R5 for subroutine handling. Where SEP R4 is a subroutine call to the address specified in the 2 bytes following. SEP R5 is used as subroutine return. For these cases the 'branch data' bytes can be defined in the Direct assembler by typing ':address' or marking the data bytes as 'Branch' via the procedure described in chapter 'Marking specific types'. By doing this also the branch data will be corrected when using insert, delete or copy commands. All 'Branch data' will be shown in <FONT COLOR="FOREST GREEN">green</FONT> text.
</p>
<p>
For example doing an insert on address 8000 in the following example:
<pre>
8000: NOP
8001: LDI 10
8003: SEP R5
8004: SEP R4
8005: <FONT COLOR="FOREST GREEN">8001</FONT>    (when typed in as :8001, and shown in <FONT COLOR="FOREST GREEN">green</FONT>)
8005: SEP R5
</pre>
<br>will result in:
<pre>
8000: NOP
8001: NOP
8002: LDI 10
8004: SEP R5
8005: SEP R4
8006: <FONT COLOR="FOREST GREEN">8002</FONT>    
8008: SEP R5
</pre>
</p>
<h3>LDL, LDV and RLDL instructions</h3>
<p>
Some code will need to load locations into registers and use the location in the register to load data. This can be done by using the LDL (LoaD Location) macro in the Direct assembler or marking correct 1802 code as 'LDL' via the procedure described in chapter 'Marking specific types'. By doing this also the location data will be corrected when using insert, delete or copy commands. All 'location data' will be shown in <FONT COLOR="FOREST GREEN">green</FONT> text.
</p>
<p>
For example doing an insert on address 8006 in the following example:
<pre>
8000: 	F8 <FONT COLOR="FOREST GREEN">80</FONT> B8	LDL R8,<FONT COLOR="FOREST GREEN">8007</FONT>
	F8 <FONT COLOR="FOREST GREEN">07</FONT> A8
8006: 	C4		NOP
8007:	AA
</pre>
<br>will result in:
<pre>
8000: 	F8 <FONT COLOR="FOREST GREEN">80</FONT> B8	LDL R8,<FONT COLOR="FOREST GREEN">8008</FONT>
	F8 <FONT COLOR="FOREST GREEN">08</FONT> A8
8006: 	C4		NOP
8007: 	C4		NOP
8008:	AA
</pre>
A similar LDV (LoaD Value) macro is available resulting in the same 1802 code sequence however for this macro the value is NOT changed by any insert, delete or copy commands. LDV value data is also NOT shown in <FONT COLOR="FOREST GREEN">green</FONT>.
</p>
<p>
For use with 1804 or 1805 code there is also a macro RLDL. RLDL will generate the same 1804/1805 code as RLDI however the Direct Assemlber will treat RLDL as a location load similar to LDL.
</p>
<h3>Branching to COMX slots and Elf EMS pages</h3>
<p>
Any long branch instruction or branch data <U>from</U> a slot or EMS page to a NON slot/page memory location will be corrected if affected by an insert or delete. However branches from NON slot/page memory <U>to</U> a slot or EMS page area will only be corrected if:
<UL>
<LI>The same slot or page code is used for both configuration ranges
<LI>A 'LBR Sxx,yyyy' macro is used for branch instructions
<LI>A ': Sxx,yyyy' macro is used for branch data
<LI>A 'LDL Sxx,Rx,yyyy' macro is used for loading a data location
</UL> 
</p>
<p>
The 'LBR Sxx,yyyy' macro can be used for any long branch instruction (LBDF, LBNF, LBNQ, LBNZ, LBQ, LBR or LBZ). 'Sxx' specifies the slot code or EMS page where the branch should jump to and 'yyyy' defines the branch address.
</p>
<p>
For example, using a COMX with SB and including configuration ranges for:
<UL>
<LI>RAM bank 0, with slot code (S/F) = 11, code start = C000, code end = C100
<LI>RAM bank 1, with slot code (S/F) = 31, code start = C000, code end = C100
<LI>RAM, no slot code (default 10 will be used), code start = BFE0, code end = BFFF
</UL>
</p>
<p>
with the following code in RAM:
<pre>
BFE0: 	C0 <FONT COLOR="FOREST GREEN">C0 80</FONT>	LBR S11,<FONT COLOR="FOREST GREEN">C080</FONT>
BFE3:	C0 <FONT COLOR="FOREST GREEN">C0 80</FONT>	LBR S31,<FONT COLOR="FOREST GREEN">C080</FONT>
</pre>
<br>Now giving an 'insert' on address C010 in RAM bank 0 (slot code 11) will result in:
<pre>
BFE0: 	C0 <FONT COLOR="FOREST GREEN">C0 80</FONT>	LBR S11,<FONT COLOR="FOREST GREEN">C081</FONT>
BFE3:	C0 <FONT COLOR="FOREST GREEN">C0 80</FONT>	LBR S31,<FONT COLOR="FOREST GREEN">C080</FONT>
</pre>
So the S11 branch is corrected as a byte is inserted in that slot but the S31 branch will remain unchanged. 
</p>
<p>
The ': Sxx,yyyy' and 'LDL Sxx,Rx,yyyy' macro work the same as the 'LBR Sxx,yyyy' macro. Except they are used for branch addresses and loading memory locations. 
</p>
<h3>Switch mnemonic</h3>
<p>
There are a few 1802 op codes with multiple mnemonics:
<br>33: <B>BDF</B>, BPZ or BGE
<br>38: <B>NBR</B> or SKP
<br>3B: <B>BNF</B>, BM, BL
<br>76: <B>SHRC</B> or RSHR
<br>7E: <B>SHLC</B> or RSHL
<br>C8: <B>NLBR</B> or LSKP
</p>
<p>
All variants will be accepted in the assembler and the variant used will be stored as a type. This can also be changed via the procedure described in chapter 'Marking specific types' and using marking 'Switch'. If code is executed without a type specified the mnemonics in bold will be used.
</p>
<h3>Searching</h3>
<p>
Three search options are available as described below>
</p>
<h4>Branch</h4>
<p>
Pressing the 'Branch' button will search all code and data areas (defined in program configurations) for branches to the current working address. The branches will be listed in the 'message' area just below the 'Command line input'.
</p>
<h4>Load L</h4>
<p>
Pressing the 'Load L' button will search all code and data areas (defined in program configurations) for instructions (LDL and RLDL) loading the location of the current working address. The locations will be listed in the 'message' area just below the 'Command line input'.
</p>
<h4>Load V</h4>
<p>
Pressing the 'Load V' button will search all code and data areas (defined in program configurations) for instructions loading the location or value of the current working address. The locations will be listed in the 'message' area just below the 'Command line input'. Note that with Load V all possible load instructions will be listed as follows:
<UL>
<LI>LD H-L: instuction sequence LDI xx, PHI RN, LDI xx, PLO RN
<LI>LD L-H: instuction sequence LDI xx, PLO RN, LDI xx, PHI RN
<LI>RLDI: RLDI RN,xxxx
<LI>LD H: instuction sequence LDI xx, PHI RN (only loading high byte current address)
<LI>LD L: instuction sequence LDI xx, PLO RN (only loading low byte current address)
<LI>LDV: LDV macro
<LI>LDL: LDL macro
<LI>RLDL: RLDL macro
</UL>
</p>
<h3>Clear</h3>
<p>
Pressing the 'Clear' button will clear the 'message' area just below the 'Command line input'.
</p>
</body>
</html>